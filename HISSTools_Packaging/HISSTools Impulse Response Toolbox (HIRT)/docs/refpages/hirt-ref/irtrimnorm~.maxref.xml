<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="irtrimnorm~" module="hirt">

	<digest>
		Trim (by RMS level), crop, or pad multiple IRs, with or without group normalisation
	</digest>

	<description>
		The <o>irtrimnorm~</o> utility allows multiple IRs to be trimmed by RMS level, cropped at specific points, or padded with zeros at the start or end of the <o>buffer~</o>.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Alex Harker</metadata>
		<metadata name="tag">HIRT</metadata>
		<metadata name="tag">HIRT Objects</metadata>
		<metadata name="tag">HIRT Impulse Response</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Instructions to <o>irtrimnorm~</o>
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				<m>Bang</m> on completion of called process
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="NONE" optional="0" type="none">
			<digest>
				No arguments for <o>irtrimnorm~</o>
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="crop">
			<arg name="io_buffers" optional="0" type="symbols" />
			<arg name="crop_start_time" optional="0" type="int/float" />
			<arg name="crop_end_time" optional="0" type="int/float" />
			<arg name="fade_in_time" optional="0" type="int/float" />
			<arg name="fade_out_time" optional="0" type="int/float" />
			<arg name="pad_start_time" optional="1" type="int/float" />
			<arg name="pad_end_time" optional="0" type="int/float" />
			<digest>
				Crop IR in-place
			</digest>
			<description>
				Syntax: <b>crop <m>&lt;symbols: io_buffers&gt;</m> <m>&lt;int/float: crop_start_time&gt;</m> <m>&lt;int/float: crop_end_time&gt;</m> <m>&lt;int/float: fade_in_time&gt;</m> <m>&lt;int/float: fade_out_time&gt;</m> <m>[&lt;int/float: pad_start_time&gt;]</m> <m>&lt;int/float: pad_end_time&gt;</m> </b><br />				<br />
				<m>crop</m> (in-place) args: io buffers 1 2 3 etc ...... / crop start time / crop end time / fade in time / fade out time / [pad start time = 0] / [pad end time = 0] <br />
				N.B. If only one pad time is present it indicates the <b>end</b> pad time, not the start (for covenience, as padding the end of buffers is more common). <br />
			</description>
		</method>
		<method name="cropto">
			<arg name="output_buffers" optional="0" type="symbols" />
			<arg name="input_buffers" optional="0" type="symbols" />
			<arg name="crop_start_time" optional="0" type="int/float" />
			<arg name="crop_end_time" optional="0" type="int/float" />
			<arg name="fade_in_time" optional="0" type="int/float" />
			<arg name="fade_out_time" optional="0" type="int/float" />
			<arg name="pad_start_time" optional="0" type="int/float" />
			<arg name="pad_end_time" optional="1" type="int/float" />
			<digest>
				Crop IR out-of-place
			</digest>
			<description>
				Syntax: <b>cropto <m>&lt;symbols: output_buffers&gt;</m> <m>&lt;symbols: input_buffers&gt;</m> <m>&lt;int/float: crop_start_time&gt;</m> <m>&lt;int/float: crop_end_time&gt;</m> <m>&lt;int/float: fade_in_time&gt;</m> <m>&lt;int/float: fade_out_time&gt;</m> <m>&lt;int/float: pad_start_time&gt;</m> <m>[&lt;int/float: pad_end_time&gt;]</m> </b><br />				<br />
				<m>cropto</m> (out-of-place) args: output buffers 1 2 3 etc ...... / input buffers 1 2 3 etc ...... / crop start time / crop end time / fade in time / fade out time / [pad start time = 0] / [pad end time = 0] <br />
				(for out-of-place operations the number of buffers must correspond) <br />
				N.B. If only one pad time is present it indicates the <b>end</b> pad time, not the start (for covenience, as padding the end of buffers is more common). <br />
			</description>
		</method>
		<method name="pad">
			<arg name="io_buffers" optional="0" type="symbols" />
			<arg name="pad_start_time" optional="1" type="int/float" />
			<arg name="pad_end_time" optional="0" type="int/float" />
			<digest>
				Pad IR in-place
			</digest>
			<description>
				Syntax: <b>pad <m>&lt;symbols: io_buffers&gt;</m> <m>[&lt;int/float: pad_start_time&gt;]</m> <m>&lt;int/float: pad_end_time&gt;</m> </b><br />				<br />
				<m>pad</m> (in-place) args: io buffers 1 2 3 etc ...... / [pad start time = 0] / pad end time <br />
			</description>
		</method>
		<method name="padto">
			<arg name="output_buffers" optional="0" type="symbols" />
			<arg name="input_buffers" optional="0" type="symbols" />
			<arg name="pad_start_time" optional="1" type="int/float" />
			<arg name="pad_end_time" optional="0" type="int/float" />
			<digest>
				Pad IR out-of-place
			</digest>
			<description>
				Syntax: <b>padto <m>&lt;symbols: output_buffers&gt;</m> <m>&lt;symbols: input_buffers&gt;</m> <m>[&lt;int/float: pad_start_time&gt;]</m> <m>&lt;int/float: pad_end_time&gt;</m> </b><br />				<br />
				<m>padto</m> (out-of-place) args: output buffers 1 2 3 etc ...... / input buffers 1 2 3 etc ...... / [pad start time = 0] / pad end time <br />
				(for out-of-place operations the number of buffers must correspond) <br />
			</description>
		</method>
		<method name="trim">
			<arg name="io_buffers" optional="0" type="symbols" />
			<arg name="trim_level_start" optional="0" type="int/float/symbol" />
			<arg name="trim_level_out" optional="0" type="int/float/symbol" />
			<arg name="fade_in_time" optional="0" type="int/float" />
			<arg name="fade_out_time" optional="0" type="int/float" />
			<arg name="pad_start_time" optional="1" type="int/float" />
			<arg name="pad_end_time" optional="0" type="int/float" />
			<digest>
				Trim IR in-place
			</digest>
			<description>
				Syntax: <b>trim <m>&lt;symbols: io_buffers&gt;</m> <m>&lt;int/float/symbol: trim_level_start&gt;</m> <m>&lt;int/float/symbol: trim_level_out&gt;</m> <m>&lt;int/float: fade_in_time&gt;</m> <m>&lt;int/float: fade_out_time&gt;</m> <m>[&lt;int/float: pad_start_time&gt;]</m> <m>&lt;int/float: pad_end_time&gt;</m> </b><br />				<br />
				<m>trim</m> (in-place) args: io buffers 1 2 3 etc ...... / trim level start /  trim level out / fade in time / fade out time / [pad start time = 0] / [pad end time = 0] <br />
				<br />
				N.B. Times are in milliseconds (unless the corresponding <m>cropinsamps</m>, <m>fadeinsamps</m> &amp; <m>padinsamps</m> attributes are <b>on</b>). <br />
				N.B. For all messages: if only one <b>pad</b> time is present it indicates the <b>end</b> pad time, not the start (for covenience, as padding the end of buffers is more common). <br />
				N.B. Trim levels are set in <b>dB</b>. Using the symbol <b>off</b> instead of a number sets trimming off for that end of the IR. Thus to trim the end only at <b>-50 dB</b> (with a <b>200 ms</b> fade) use a message like: <b><m>trim</m> off -50 0 200</b> etc ...... <br />
				<br />
			</description>
		</method>
		<method name="trimto">
			<arg name="output_buffers" optional="0" type="symbols" />
			<arg name="input_buffers" optional="0" type="symbols" />
			<arg name="trim_level_start" optional="0" type="int/float/symbol" />
			<arg name="trim_level_out" optional="0" type="int/float/symbol" />
			<arg name="fade_in_time" optional="0" type="int/float" />
			<arg name="fade_out_time" optional="0" type="int/float" />
			<arg name="pad_start_time" optional="0" type="int/float" />
			<arg name="pad_end_time" optional="0" type="int/float" />
			<digest>
				Trim IR out-of-place
			</digest>
			<description>
				Syntax: <b>trimto <m>&lt;symbols: output_buffers&gt;</m> <m>&lt;symbols: input_buffers&gt;</m> <m>&lt;int/float/symbol: trim_level_start&gt;</m> <m>&lt;int/float/symbol: trim_level_out&gt;</m> <m>&lt;int/float: fade_in_time&gt;</m> <m>&lt;int/float: fade_out_time&gt;</m> <m>&lt;int/float: pad_start_time&gt;</m> <m>&lt;int/float: pad_end_time&gt;</m> </b><br />				<br />
				<m>trimto</m> (out-of-place) args: output buffers 1 2 3 etc ...... / input buffers 1 2 3 etc ...... / trim level start /  trim level out / fade in time / fade out time / [pad start time = 0] / [pad end time = 0] <br />
				(for out-of-place operations the number of buffers must correspond) <br />
				<br />
				N.B. Times are in milliseconds (unless the corresponding <m>cropinsamps</m>, <m>fadeinsamps</m> &amp; <m>padinsamps</m> attributes are <b>on</b>). <br />
				N.B. For all messages: if only one <b>pad</b> time is present it indicates the <b>end</b> pad time, not the start (for covenience, as padding the end of buffers is more common). <br />
				N.B. Trim levels are set in <b>dB</b>. Using the symbol <b>off</b> instead of a number sets trimming off for that end of the IR. Thus to trim the end only at <b>-50 dB</b> (with a <b>200 ms</b> fade) use a message like: <b><m>trim</m> off -50 0 200</b> etc ...... <br />
				<br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="cropinsamps" get="1" set="1" type="int" size="1">
			<digest>
				Crop Times in Samples
			</digest>
			<description>
				Crop times are normally specified in milliseconds. When <m>cropinsamps</m> is <b>on</b>, crop times are set in samples.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Crop Times in Samples" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="fadeinsamps" get="1" set="1" type="int" size="1">
			<digest>
				Fade Times in Samples
			</digest>
			<description>
				Fade times are normally specified in milliseconds. When <m>fadeinsamps</m> is <b>on</b>, fade times are set in samples.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Fade Times in Samples" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="fadetype" get="1" set="1" type="int" size="1">
			<digest>
				Fade Type
			</digest>
			<description>
				Sets the fade type used for fades (both in and out). <m>fadetype</m> is set with an integer, <b>0..4</b>. The options are: <br />
				<b>0</b>: Linear <br />
				<b>1</b>: Square <br />
				<b>2</b>: Square Root <br />
				<b>3</b>: Cosine <br />
				<b>4</b>: Sigmoid <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Fade Type" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="integrationtimes" get="1" set="1" type="float_array" size="0">
			<digest>
				Integration Times
			</digest>
			<description>
				Two <m>float</m> values for the integration times used for RMS calculations during trim operations. The first value is the integration time for calculating RMS at the start of the IRs, the second is the integration time used for calculating the RMS at the end of the IRs. <br />
				Generally, a smaller value works well for start RMS, and a longer one for end RMS.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Integration Times" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="limitedwarnings" get="1" set="1" type="int" size="1">
			<digest>
				Limited Warnings
			</digest>
			<description>
				When <m>limitedwarnings</m> is <b>on</b>, the <o>irtrimnorm~</o> object will not warn about overlapping fades, fades shorter than requested, or buffers shorter than requested. <br />
				It will still warn about nonsensical parameter values or zero-length output buffers. This is so you can avoid tedious warnings in situations where you are expecting these issues to occur.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Limited Warnings" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="normlevel" get="1" set="1" type="float" size="1">
			<digest>
				Normalization Level (dB)
			</digest>
			<description>
				The level in <b>dB</b> to normalise to (if <m>normmode</m> is <b>on</b>).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Normalization Level (dB)" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="normmode" get="1" set="1" type="int" size="1">
			<digest>
				Normalization Mode
			</digest>
			<description>
				When <m>normmode</m> is <b>on</b>, all messages to <o>irtrimnorm~</o> result in normalised output. Normalisation is done by peak level (not RMS) and across all inputs. <br />
				Thus realtive levels between input IRs are maintained. Set normalisation level with the <m>normlevel</m> attribute.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Normalization Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="padinsamps" get="1" set="1" type="int" size="1">
			<digest>
				Pad Times in Samples
			</digest>
			<description>
				Pad times are normally specified in milliseconds. When <m>padinsamps</m> is <b>on</b>, pad times are set in samples.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Pad Times in Samples" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="readchan" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Read Channel
			</digest>
			<description>
				Sets the channel number for <o>buffer~</o> reading (1-4). If the specified channel does not exist the value is wrapped within the existing number of channels (so 3 will read from channel 1 of a two-channel <o>buffer~</o>, 4 from channel 2). <br />
				<b>units: int, default: 1, range: 1..4</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Read Channel" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="resize" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Resize
			</digest>
			<description>
				If on, the <o>buffer~</o> will resize to the necessary size before write. Resizing erases all contents of the <o>buffer~</o>. <br />
				Otherwise, output will ONLY happen if there is enough room to write the entire output, leaving the latter contents of the <o>buffer~</o> and other <o>buffer~</o> channels unaffected. <br />
				<b>units: flag, default: 1, range: 0/1</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Resize" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="writechan" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Write Channel
			</digest>
			<description>
				Sets the channel number for <o>buffer~</o> writing (1-4). If the specified channel does not exist the value is wrapped within the existing number of channels (so 3 will write to channel 1 of a two-channel <o>buffer~</o>, 4 to channel 2). <br />
				<b>units: int, default: 1, range: 1..4</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Write Channel" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		When dealing with multple IRs it is necessary to treat the IRs together in order to maintain the relative time delays and levels. The <o>irtrimnorm~</o> utility object allows multiple IRs to be trimmed by RMS level, cropped at specific points, or padded with zeros at the start or end of the <o>
		buffer~</o>. Operations may either be done in-place or out-of-place. All messages will <m>normalise</m> if this mode is switched on.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="iralign~" />
		<seealso name="iraverage~" />
		<seealso name="irextract~" />
		<seealso name="irinvert~" />
		<seealso name="irmeasure~" />
		<seealso name="irnonlin~" />
		<seealso name="irphase~" />
		<seealso name="irplapprox~" />
		<seealso name="irreference~" />
		<seealso name="irstats~" />
		<seealso name="irsweeps~" />
		<seealso name="irtransaural~" />
		<seealso name="iruser~" />
		<seealso name="irvalue~" />
		<seealso name="bufconvolve~" />
		<seealso name="bufresample~" />
		<seealso name="bufreverse~" />
		<seealso name="morphfilter~" />
		<seealso name="multiconvolve~" />
		<seealso name="spectrumdraw~" />
		<seealso name="hirt.irmaker~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (messages)">
			<description>
				Instructions to <o>irtrimnorm~</o>.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (bang)">
			<description>
				<m>Bang</m> on completion of called process.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		When dealing with multple IRs it is necessary to treat the IRs together in order to maintain the relative time delays and levels. The <o>irtrimnorm~</o> utility object allows multiple IRs to be trimmed by RMS level, cropped at specific points, or padded with zeros at the start or end of the <o>
		buffer~</o>. Operations may either be done in-place or out-of-place. All messages will <m>normalise</m> if this mode is switched on.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
impulse response, buffer, pad.
			</description>
		</entry>
	</misc>

</c74object>