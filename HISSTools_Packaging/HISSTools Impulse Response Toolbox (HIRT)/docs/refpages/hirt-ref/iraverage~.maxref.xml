<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="iraverage~" module="hirt">

	<digest>
		Average multiple IRs in the time or frequency domain
	</digest>

	<description>
		<o>iraverage~</o> performs averaging on an aribtary number of IRs in either the time domain or the frequency domain.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Alex Harker</metadata>
		<metadata name="tag">HIRT</metadata>
		<metadata name="tag">HIRT Objects</metadata>
		<metadata name="tag">HIRT Impulse Response</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The <m>average</m> or <m>process</m> messages
			</digest>
			<description>
				The <m>average</m> &amp; <m>process</m> messages perform IR time and freq domain averaging respectively and must be followed by their required arguments
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				<m>Bang</m> on completion of requested process
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="NONE" optional="0" type="none">
			<digest>
				No arguments for <o>iraverage~</o>
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="average">
			<arg name="output_buffer_name" optional="0" type="symbol" />
			<arg name="input_buffer_name" optional="0" type="symbol" />
			<arg name="input_buffer_name" optional="1" type="symbol" />
			<digest>
				Average in time domain
			</digest>
			<description>
				Syntax: <b>average <m>&lt;symbol: output_buffer_name&gt;</m> <m>&lt;symbol: input_buffer_name&gt;</m> <m>[&lt;symbol: input_buffer_name&gt;]</m> </b><br />				<br />
				Average (time domain): output <o>buffer~</o> / input <o>buffer~</o> 1 2 3 etc ...... [variable number of args] <br />
			</description>
		</method>
		<method name="process">
			<arg name="output_buffer_name" optional="0" type="symbol" />
			<arg name="time_multiplier" optional="1" type="float" />
			<arg name="input_buffer_name" optional="0" type="symbol" />
			<arg name="input_buffer_name" optional="1" type="symbol" />
			<digest>
				Process in freq domain
			</digest>
			<description>
				Syntax: <b>process <m>&lt;symbol: output_buffer_name&gt;</m> <m>[&lt;float: time_multiplier&gt;]</m> <m>&lt;symbol: input_buffer_name&gt;</m> <m>[&lt;symbol: input_buffer_name&gt;]</m> </b><br />				<br />
				Process (freq domain with optional smoothing): output <o>buffer~</o> / [time multiplier = 1] / input <o>buffer~</o> 1 2 3 etc ...... [variable number of args] <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="phase" get="1" set="1" type="atom" size="1">
			<digest>
				Output Phase
			</digest>
			<description>
				Specifies the phase of the output. The phase may either be specified as a float value between <b>0</b> and <b>1</b> (where <b>0</b> is <b>minimum</b> phase, <b>0.5</b> is <b>linear</b> phase and <b>1</b> is <b>maximum</b> phase), or using any of the following symbols: <br />
				<b>min</b> / <b>minimum</b>: Minimum Phase <br />
				<b>lin</b> / <b>linear</b>: Linear Phase <br />
				<b>max</b> / <b>maximum</b>: Maximum Phase <br />
				<br />
				<b>units: float or symbol, default: 0 / minimum, range: 0..1 or min/lin/max</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Phase" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="readchan" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Read Channel
			</digest>
			<description>
				Sets the channel number for <o>buffer~</o> reading (1-4). If the specified channel does not exist the value is wrapped within the existing number of channels (so 3 will read from channel 1 of a two-channel <o>buffer~</o>, 4 from channel 2). <br />
				<b>units: int, default: 1, range: 1..4</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Read Channel" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="resize" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Resize
			</digest>
			<description>
				If on, the <o>buffer~</o> will resize to the necessary size before write. Resizing erases all contents of the <o>buffer~</o>. <br />
				Otherwise, output will ONLY happen if there is enough room to write the entire output, leaving the latter contents of the <o>buffer~</o> and other <o>buffer~</o> channels unaffected. <br />
				<b>units: flag, default: 1, range: 0/1</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Resize" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="smoothamount" get="1" set="1" type="float_array" size="0">
			<digest>
				Smoothing Amounts
			</digest>
			<description>
				The spectral smoothing can change in linear width as the centre frequency changes. Typically, it makes sense to smooth more at high frequencies and less at low ones (corresponding to human perception). <br />
				The smoothing amounts set the smoothing widths in normalised linear frequency (where <b>0</b> is <b>0 Hz</b> and <b>0.5</b> is the <b>nyquist</b> frequency). <br />
				If one value only is given then the width of the smoothing window at <b>0 Hz</b> will be <b>0 Hz</b> and the width of the window at <b>nyquist</b> frequency will be the value given (with linear interpolation of widths inbetween). <br />
				If two values are given these are the window widths at <b>0 Hz</b> and the <b>nyquist</b> frequency respectively (with linear interpolation of widths inbetween). No values switches smoothing off. <br />
				<b>units: none, float/list, default: 0</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Smoothing Amounts" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="smoothmode" get="1" set="1" type="int" size="1">
			<digest>
				Smoothing Mode
			</digest>
			<description>
				High-quality smoothing offers a higher quality result (especially on shorter signals), but is very CPU-intensive, so calculation times can be quite long, even impractically so. <br />
				The fast mode is significantly faster (as it computes in linear time) and sufficiently accurate for many purposes. Thus, this is the default mode for the <m>irplapprox~</m> and <m>irreference~</m> objects. <br />
				If you change this you can expect very long wait times! <br />
				<b>units: flag, default: 0, range: 0/1</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Smoothing Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="writechan" get="1" set="1" type="int" size="1">
			<digest>
				Buffer Write Channel
			</digest>
			<description>
				Sets the channel number for <o>buffer~</o> writing (1-4). If the specified channel does not exist the value is wrapped within the existing number of channels (so 3 will write to channel 1 of a two-channel <o>buffer~</o>, 4 to channel 2). <br />
				<b>units: int, default: 1, range: 1..4</b>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Buffer Write Channel" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>iraverage~</o> performs averaging on an aribtary number of IRs in either the time domain or the frequency domain (with optional frequency domain smoothing). In the latter case, phase information is dismissed, and the averaged output is set to a specified phase.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="iralign~" />
		<seealso name="irextract~" />
		<seealso name="irinvert~" />
		<seealso name="irmeasure~" />
		<seealso name="irnonlin~" />
		<seealso name="irphase~" />
		<seealso name="irplapprox~" />
		<seealso name="irreference~" />
		<seealso name="irstats~" />
		<seealso name="irsweeps~" />
		<seealso name="irtransaural~" />
		<seealso name="irtrimnorm~" />
		<seealso name="iruser~" />
		<seealso name="irvalue~" />
		<seealso name="bufconvolve~" />
		<seealso name="bufresample~" />
		<seealso name="bufreverse~" />
		<seealso name="morphfilter~" />
		<seealso name="multiconvolve~" />
		<seealso name="spectrumdraw~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (messages)">
			<description>
				The <m>average</m> or <m>process</m> messages.
				The <m>average</m> &amp; <m>process</m> messages perform IR time and freq domain averaging respectively and must be followed by their required arguments
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (bang)">
			<description>
				<m>Bang</m> on completion of requested process.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>iraverage~</o> performs averaging on an aribtary number of IRs in either the time domain or the frequency domain (with optional frequency domain smoothing). In the latter case, phase information is dismissed, and the averaged output is set to a specified phase.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
impulse response, buffer.
			</description>
		</entry>
	</misc>

</c74object>